1. 
SET SERVEROUTPUT ON;
DECLARE
  v_counter BINARY_INTEGER := 0;
BEGIN
  WHILE v_counter < 5 LOOP
    -- increment loop counter by one
    v_counter := v_counter + 1;
    DBMS_OUTPUT.PUT_LINE ('v_counter = ' || v_counter);
  END LOOP;
  -- control resumes here
  DBMS_OUTPUT.PUT_LINE ('Done...');
END;
/


2.
SET SERVEROUTPUT ON;
DECLARE
  v_sum NUMBER := 0;
BEGIN
  FOR v_counter IN 1..10 LOOP
    v_sum := v_sum + v_counter;
    DBMS_OUTPUT.PUT_LINE ('Current sum is: ' || v_sum);
  END LOOP;
  -- control resumes here
  DBMS_OUTPUT.PUT_LINE('The sum of integers between 1 and 10 is: ' || v_sum);
END;
/


3.
SET SERVEROUTPUT ON;
DECLARE
  v_factorial NUMBER := 1;
  v_counter NUMBER := 1;
BEGIN
  LOOP
    EXIT WHEN v_counter > 10;
    v_factorial := v_factorial * v_counter;
    v_counter := v_counter + 1;
  END LOOP;
  -- control resumes here
  DBMS_OUTPUT.PUT_LINE('Factorial of ten is: ' || v_factorial);
END;
/

4.
SET SERVEROUTPUT ON;
DECLARE
  v_factorial NUMBER := 1;
BEGIN
  FOR v_counter IN 1..10 LOOP
    IF MOD(v_counter, 2) != 0 THEN -- Skip if v_counter is odd
      CONTINUE;
    END IF;
    v_factorial := v_factorial * v_counter;
  END LOOP;
  -- control resumes here
  DBMS_OUTPUT.PUT_LINE('Factorial of even integers between 1 and 10 is: ' || v_factorial);
END;
/

5.
SET SERVEROUTPUT ON;
DECLARE
  v_test NUMBER := 0;
  i NUMBER := 1; -- Counter for outer loop
BEGIN
  <<outer_loop>>
  LOOP
    EXIT WHEN i > 3;
    DBMS_OUTPUT.PUT_LINE('Outer Loop');
    DBMS_OUTPUT.PUT_LINE('i = ' || i);
    DBMS_OUTPUT.PUT_LINE('v_test = ' || v_test);
    v_test := v_test + 1;
    
    DECLARE
      j NUMBER := 1; -- Counter for inner loop
    BEGIN
      <<inner_loop>>
      WHILE j <= 2 LOOP
        DBMS_OUTPUT.PUT_LINE('Inner Loop');
        DBMS_OUTPUT.PUT_LINE('j = ' || j);
        DBMS_OUTPUT.PUT_LINE('i = ' || i);
        DBMS_OUTPUT.PUT_LINE('v_test = ' || v_test);
        j := j + 1;
      END LOOP inner_loop;
    END;
    
    i := i + 1;
  END LOOP outer_loop;
END;
/

6.
DECLARE
    v_student_id STUDENT.STUDENT_ID%TYPE := 1912003;
    v_count NUMBER;
BEGIN
    -- Check if a record exists for the given student ID
    SELECT COUNT(*)
    INTO v_count
    FROM STUDENT
    WHERE STUDENT_ID = v_student_id;

    -- If no record exists, insert a new record
    IF v_count = 0 THEN
        INSERT INTO STUDENT (STUDENT_ID, FIRST_NAME, LAST_NAME, STREET_ADDRESS, ZIP, PHONE, REGISTRATION_DATE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE)
        VALUES (v_student_id, 'Popa', 'Ciprian', 'Martirilor', '1912003', '074-011', SYSDATE, 'System', SYSDATE, 'System', SYSDATE); 
        COMMIT; -- commit the transaction
        DBMS_OUTPUT.PUT_LINE('Record inserted for student ID: ' || v_student_id);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Record already exists for student ID: ' || v_student_id);
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('error!' || SQLERRM);
END;
/


SELECT *
FROM STUDENT
WHERE STUDENT_ID = 1912003;

DELETE FROM STUDENT
WHERE STUDENT_ID = 1912003;

7. 
DECLARE
    v_instructor_id INSTRUCTOR.INSTRUCTOR_ID%TYPE := 101; 
    v_count NUMBER;
BEGIN
    -- check if the given instructor id is valid
    SELECT COUNT(*)
    INTO v_count
    FROM INSTRUCTOR
    WHERE INSTRUCTOR_ID = v_instructor_id;

    IF v_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('Invalid instructor ID: ' || v_instructor_id);
    ELSE
        -- counting the number of sections taught by the instructor
        SELECT COUNT(*)
        INTO v_count
        FROM SECTION
        WHERE INSTRUCTOR_ID = v_instructor_id;

        DBMS_OUTPUT.PUT_LINE('Instructor ID: ' || v_instructor_id || ' teaches ' || v_count || ' sections.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('error!' || SQLERRM);
END;
/


8.
DECLARE
    v_course_id COURSE.COURSE_NO%TYPE := 'COURSE1';
    v_course_name COURSE.DESCRIPTION%TYPE;
    v_num_sections NUMBER;
    v_num_students NUMBER;

    --custom exception declaration
    e_single_student_enrolled EXCEPTION;
    PRAGMA EXCEPTION_INIT(e_single_student_enrolled, -99919); --custom error code
BEGIN
    --here we get the course name
    SELECT DESCRIPTION
    INTO v_course_name
    FROM COURSE
    WHERE COURSE_NO = v_course_id;

    --we count the nr of sections
    SELECT COUNT(*)
    INTO v_num_sections
    FROM SECTION
    WHERE COURSE_NO = v_course_id;

    --count the students enrolled
    SELECT COUNT(*)
    INTO v_num_students
    FROM ENROLLMENT
    WHERE SECTION_ID IN (SELECT SECTION_ID FROM SECTION WHERE COURSE_NO = v_course_id);

    --print all we want
    DBMS_OUTPUT.PUT_LINE('Course ID: ' || v_course_id);
    DBMS_OUTPUT.PUT_LINE('Course Name: ' || v_course_name);
    DBMS_OUTPUT.PUT_LINE('Number of Sections: ' || v_num_sections);
    DBMS_OUTPUT.PUT_LINE('Total Number of Students Enrolled: ' || v_num_students);

    --raise custom exception if 0 students are enrolled in the course
    IF v_num_students = 0 THEN
        RAISE e_single_student_enrolled;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for the given ID of the course: ' || v_course_id);
    WHEN e_single_student_enrolled THEN
        DBMS_OUTPUT.PUT_LINE('PROBLEM! Only one student is enrolled in the course!');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/










9.
DECLARE
    v_section_id SECTION.SECTION_ID%TYPE := 1; 
    v_num_students NUMBER; --store nr of students registered in a section

    --custom exception
    e_no_students_enrolled EXCEPTION;
BEGIN
    -- getting the number of students registered in the provided section
    SELECT COUNT(*)
    INTO v_num_students
    FROM ENROLLMENT
    WHERE SECTION_ID = v_section_id;

    --check if the number of students is equal to 0
    IF v_num_students = 0 THEN
        --raise custom exception e_no_students_enrolled and display an error message
        RAISE_APPLICATION_ERROR(-20001, 'PROBLEM: 0 STUDENTS IN THIS SECTION ' || v_section_id);
    ELSE
        --display the number of students in the section
        DBMS_OUTPUT.PUT_LINE('Number of students in section ' || v_section_id || ': ' || v_num_students);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found for section ' || v_section_id);
    WHEN e_no_students_enrolled THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/


























































