#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

struct Point {
    double x, y;
};

double euclidean_distance(const Point& a, const Point& b) {
    double dx = a.x - b.x;
    double dy = a.y - b.y;
    return std::sqrt(dx * dx + dy * dy);
}

bool comp(const Point& a, const Point& b) {
    return a.x < b.x;
}

std::vector<Point> k_nearest_neighbors(const std::vector<Point>& input_points, const Point& query_point, size_t k) {
    std::vector<Point> points(input_points.begin(), input_points.end());

    // Sort the points by their x-coordinate
    std::sort(points.begin(), points.end(), comp);

    // Find the k nearest neighbors
    std::vector<Point> nearest_neighbors;
    for (size_t i = 0; i < k; ++i) {
        nearest_neighbors.push_back(points[i]);
    }

    return nearest_neighbors;
}

int main() {
    // Example usage
    std::vector<Point> points = {
        {1.0, 2.0},
        {2.0, 3.0},
        {3.0, 4.0},
        {4.0, 5.0},
        {5.0, 6.0}
    };

    Point query = {2.5, 3.5};
    size_t k = 3;

    std::vector<Point> nearest_neighbors = k_nearest_neighbors(points, query, k);

    std::cout << "The " << k << " nearest neighbors to the query point (" << query.x << ", " << query.y << ") are:\n";
    for (const Point& neighbor : nearest_neighbors) {
        std::cout << "(" << neighbor.x << ", " << neighbor.y << ")\n";
    }

    return 0;
}
