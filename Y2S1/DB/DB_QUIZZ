1.Given that the data sample from above *
is representative for ALL functional
dependencies in the real dataset,
select which ones valid functional
dependencies in the dataset
Multiple options are possible
a.{BC} -> F
b.C->A
c.A->B
d.E->C
e.F->C
f.C->F
g.C->E
h.D->E

2.Suppose relation R(A, B, C) currently
has only the tuple (0,0,0) and it must
always satisfy the functional
dependencies A T B and B T C.
Which of the following tuples may be
inserted into R legally?
a.(0, 0, 1)
b.(0,0, 2)
c.(0, 1,0)
d.(1,1,0)

3.The candidate key of the relation R(A,B, C,D,E, F) is
a.{BC} --
b.{ABC}
c.{BD} --
d.{E}
e.{AB} --
f.{AD} --
g.{C}
h.{F}
i.{A} --
j.{B} --
k.{DB}
l.{D} --
m.{AC}

4.
Data Sample(this is a table)
A, B, C, D, E, F;
2012, DiCaprio, Django Unchained, 1234, Columbia Pictures, Comp A;
2019, DiCaprio, Once Upon..., 456, Heydey Films, Comp B;
2015, DiCaprio, The Revenant, 1234, Columbia Pictures, Comp B;
2012, Waltz, Django Unchained, 1234, Columbia Pictures, Comp C.





Data Sample
A
2012
B
DiCaprio
C
Django
Unchained
Once Upon...
D
1234
E
Columbia
Pictures
Heydey
Films
Columbia
Pictures
Columbia
Pictures
F
Comp A
2019
DiCaprio
456
Comp B
2015
DiCaprio
The Revenant
1234
Comp B
2012
Waltz
Django
Unchained
1234
Comp C
Given that the data sample from above is
representative for ALL functional
dependencies in the real dataset, select which
ones valid functional dependencies in the
dataset
Multiple options are possible
A->B
{BC}->F
E->C
C->A
F->C
C->E
D->E
C->F

5. Given the table Products(id INT, description
NVARCHAR(512), category VARCHAR(128),
details JSON) in MySQL, write the SQL
statement that updates the resolution to
3840 x 2160' for all products in 'TV SET
category where resolution is '3840 x 21 60"
(Note: the <> is stored as a JSON property in
details column).

update products 
set details = json_set(details, '$.resolution', '3840 x 2160') 
where category = 'TV SET' 
and json_extract(details, '$.resolution') = '3840 x 2160';

6. The relation R(A, B, C, D, E, F) is in the
following normal form
a.1NF  -- correct
b.2NF
c.3NF
d.4NF
e.BCNF

7. Consider a relation R(A,B,C,D,E) with two
multi-valued dependencies: A -> B,B + D and
no functional dependencies. Suppose we
decompose R into 4th Normal Form
Depending on the order in which we deal with
4NF violations, we can get different final
decompositions. Which one of the following
relation could be in the final 4NF
decomposition?
a.AC
b.ABCDE
c.BD
d.ACDE

8. Among the advantages of SQL are:
a.Impossible to model a relational database
using it
b.Complex queries cannot be computed
-- c.Simple queries can be used to retrieve data
quickly and efficiently
-- d.Easy to learn and almost every DBMS
supports it

9. Consider table R(A) containing {(3}, (4)}.
Suppose transaction T1 is "update T set
A=2*A; insert into R values (6)" and
transaction T2 is "select avg(A) from R; select
avg(A) from R". If transaction T2 executes
using "repeatable read", what are the possible
values returned by its SECOND statement?
a. 7
b. 6.66 --
c. 3.5
d. 10

10. Given HighSalary view created as below,
which of the following statements will be
rejected / accepted by the DBMS?
CREATE TABLE EmpSalary(EmpId INT, Salary INT);
ICREATE VIEW HighSalary
AS SELECT * FROM EmpSalary WHERE salary > 10000
WITH CHECK OPTION;
Accepted
Rejected
rej - UPDATE
HighSalary SET
salary =9500
WHERE EmpId=
1234
acc - UPDATE
HighSalary SET
salary =10500
WHERE Empld =
1234
rej - INSERT INTO
HighSalary(Empld,
salary) VALUES
(1234, 8000)
acc - INSERT INTO
HighSalary(Empld,
salary) VALUES
(123, 10000)
acc - DELETE FROM
HighSalary
WHERE
Empld=123

11. Consider a relational database schema for a
university management system with the
following tables:
1. **Student (StudentID, FirstName, LastName,
Address, Phone, DepartmentlD)**
Candidate Key: StudentID
2.**Course (CourselD, CourseName,
DepartmentID, InstructorlD)**
Candidate Key: CourselD
3. **Department (DepartmentID,
DepartmentName, Location)**
Candidate Key: DepartmentID
4. **Instructor (InstructorlD, FirstName,
LastName, DepartmentlD)**
Candidate Key: InstructorlD
The database is currently in 2nd Normal Form
(2NF). However, during a recent review, it was
identified that there are some potential issues
related to functional dependencies and partial
dependencies. Your task is to perform the
necessary transformations to bring the
database to at least 3rd Normal Form (3NF).
Identify the functional dependencies and
partial dependencies that violate the 3rd
Normal Form and perform the required normal
form transformations. Provide the resulting
tables with their attributes and any additional
tables created during the normalization
process.
Ensure that each table has a clearly defined
primary key, and foreign keys are appropriately
assigned. If any new tables are created during
the normalization process, specify their primary
and foreign keys as well
Explain each step of the normalization process
and justify your decisions:


For the database management system, norminalization is essential in order to store the data in an efficient way and also maintaining the integrity of it. The given university management system database must be normalized to 3nf because it has to take into consideration the functional dependencies and also the partial ones.
First we have to identify our dependencies: 
-identification dependencies: we have to identify the functional dependencies and the partial ones
  Functional ones:
   -StudentID determines FirstName, LastName, Address, Phone, and DepartmentID
   -CourseID determines CourseName, DepartmentID, and InstructorID
   -DepartmentID determines DepartmentName and Location
   -InstructorID determines FirstName, LastName, and DepartmentID
  Partial dependencies - none
Steps for norminalization:
  -In order to resolve the functional dependency StudentID DepartmentID, we can create a separate Department table
  -The Department table includes the DepartmentID(as a primary key), DepartmentName, and Location
  -We update the student table, removing DepartmentName and Location, and retain only DepartmentID as a foreign key that is referencing the Department table
  -We maintain the existing Course and Instructor tables as they already have direct dependencies on DepartmentID.
The tables that we get would look like this(at least this is how we could create them(I did not placed the create instruction)):

Department (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(255),
    Location VARCHAR(255)
);
Student (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Address VARCHAR(255),
    Phone VARCHAR(15),
    DepartmentID INT,   -- (foreign key that references Department)
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)
);
Course (
    CourseID INT PRIMARY KEY,
    CourseName VARCHAR(255),
    DepartmentID INT,
    InstructorID INT,   -- (foreign key that references Instructor)
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    FOREIGN KEY (InstructorID) REFERENCES Instructor(InstructorID)
);
Instructor (
    InstructorID INT PRIMARY KEY,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)
);
This normalization process ensures that each table that we have has a clearly defined primary key and it establish appropriate foreign key relationships between all tables while mantaining the data integrity.












//txt
1):)
D->E
C->A
C->E
BC->F


2) BC?

3)3NF?/BCNF?/2NF?

4)(1,1,0)?

5)UPDATE Products
SET details = JSON_SET(details, '$.resolution', '3840 x 2160')
WHERE category = 'TV SET' AND JSON_EXTRACT(details, '$.resolution') = '3820 x 2160';???

6)Advantages of SQL:
*Simple queries can be used to retrieve data quickly and efficiently

*Easy to learn and almost every DBMS supports it

7)Data manipulation commands are:
*DELETE

*INSERT

8)What is a relation :
*A relation contains attributes
*A relation is a table with columms and rows
* A relation holds information about the object to be represented in the database

9)What do you understand by functional dependencies:
A relation is said to be in functional dependency when one attribute uniquely defines another attribute

10)The following commands are NOT from Data Definition Language
*INSERT
*COMMIT

11) What are the advantages and disadvantages of views in a database:
*Views account for logical data independece as the growth and restructuring of tables are not reflected in the views

*Views are used in order to abstract the database structure  from application developers.

*A view is a virtual table that does not have its data on its own rather the data is defined from one or more underlying tables

12) 6.66

13) 2?

14)


















































































































































































